// Selection Sort

#include <iostream> 
#include <vector> 
using namespace std; 
void selectionSort(vector<int> &arr) { 
int n = arr.size(); 
for (int i = 0; i < n - 1; ++i) { 
int minIndex = i; 
for (int j = i + 1; j < n; ++j) { 
if (arr[j] < arr[minIndex]) { 
minIndex = j; 
} 
} 
if (minIndex != i) { 
swap(arr[i], arr[minIndex]); 
} 
} 
} 
int main() { 
vector<int> arr = {64, 25, 12, 22, 11}; 
cout << "Original array:" << endl; 
for (int num : arr) { 
cout << num << " "; 
} 
cout << endl; 
selectionSort(arr); 
cout << "Sorted array:" << endl; 
for (int num : arr) { 
cout << num << " "; 
} 
cout << endl; 
return 0; 
}


// Insertion Sort


#include <iostream> 
#include <vector> 
using namespace std; 
void insertionSort(vector<int> &arr) { 
int n = arr.size(); 
for (int i = 1; i < n; ++i) { 
int key = arr[i]; 
int j = i - 1; 
while (j >= 0 && arr[j] > key) { 
arr[j + 1] = arr[j]; 
j = j - 1; 
} 
arr[j + 1] = key; 
} 
} 
int main() { 
vector<int> arr = {64, 25, 12, 22, 11}; 
cout << "Original array:" << endl; 
for (int num : arr) { 
cout << num << " "; 
} 
cout << endl; 
insertionSort(arr); 
cout << "Sorted array:" << endl; 
for (int num : arr) { 
cout << num << " "; 
} 
cout << endl; 
return 0; 
}



//Merge Sort

#include <iostream> 
#include <vector> 
using namespace std; 
void merge(vector<int>& arr, int left, int mid, int right) { 
int n1 = mid - left + 1; 
int n2 = right - mid; 
vector<int> L(n1), R(n2); 
for (int i = 0; i < n1; ++i) 
L[i] = arr[left + i]; 
for (int j = 0; j < n2; ++j) 
R[j] = arr[mid + 1 + j]; 
int i = 0, j = 0, k = left; 
while (i < n1 && j < n2) { 
if (L[i] <= R[j]) { 
arr[k] = L[i]; 
++i; 
} else { 
arr[k] = R[j]; 
++j; 
} 
++k; 
} 
while (i < n1) { 
arr[k] = L[i]; 
++i; 
++k; 
} 
while (j < n2) { 
arr[k] = R[j]; 
++j; 
++k; 
} 
} 
void mergeSort(vector<int>& arr, int left, int right) { 
if (left < right) { 
int mid = left + (right - left) / 2; 
mergeSort(arr, left, mid); 
mergeSort(arr, mid + 1, right); 
merge(arr, left, mid, right); 
} 
} 
int main() { 
vector<int> arr = {64, 25, 12, 22, 11}; 
cout << "Original array:" << endl; 
for (int num : arr) { 
cout << num << " "; 
} 
cout << endl; 
mergeSort(arr, 0, arr.size() - 1); 
cout << "Sorted array:" << endl; 
for (int num : arr) { 
cout << num << " "; 
} 
cout << endl; 
return 0; 
} 




//Quick Sort


#include <iostream> 
#include <vector> 
using namespace std; 
int partition(vector<int>& arr, int low, int high) { 
int pivot = arr[high]; 
int i = low - 1; 
for (int j = low; j <= high - 1; ++j) { 
if (arr[j] < pivot) { 
++i; 
swap(arr[i], arr[j]); 
} 
} 
swap(arr[i + 1], arr[high]); 
return (i + 1); 
} 
void quickSort(vector<int>& arr, int low, int high) { 
if (low < high) { 
int pi = partition(arr, low, high); 
quickSort(arr, low, pi - 1); 
quickSort(arr, pi + 1, high); 
} 
} 
int main() { 
vector<int> arr = {64, 25, 12, 22, 11}; 
cout << "Original array:" << endl; 
for (int num : arr) { 
cout << num << " "; 
} 
cout << endl; 
int n = arr.size(); 
quickSort(arr, 0, n - 1); 
cout << "Sorted array:" << endl; 
for (int num : arr) { 
cout << num << " "; 
} 
cout << endl; 
return 0; 
} 



// BFS

#include <iostream> 
#include <vector> 
#include <queue> 
using namespace std; 
class Graph { 
int V; 
vector<vector<int>> adj; 
public: 
Graph(int vertices) : V(vertices), adj(vertices) {} 

void addEdge(int v, int w) { 
adj[v].push_back(w); 
} 

void BFS(int start) { 
vector<bool> visited(V, false); 
queue<int> q;  
visited[start] = true; 
q.push(start); 
while (!q.empty()) { 
 
int current = q.front(); 
cout << current << " "; 
q.pop(); 
 
for (int adjacent : adj[current]) { 
if (!visited[adjacent]) { 
visited[adjacent] = true; 
q.push(adjacent); 
} 
} 
} 
} 
}; 
int main() { 
// Create a graph 
Graph g(4); 
g.addEdge(0, 1); 
g.addEdge(0, 2); 
g.addEdge(1, 2); 
g.addEdge(2, 0); 
g.addEdge(2, 3); 
g.addEdge(3, 3); 
cout << "BFS Traversal starting from vertex 2: "; 
g.BFS(2); 
return 0; 
}



//DFS

#include <iostream> 
#include <vector> 
#include <stack> 
using namespace std; 
class Graph { 
int V; 
vector<vector<int>> adj; 
public: 
Graph(int vertices) : V(vertices), adj(vertices) {} 

void addEdge(int v, int w) { 
adj[v].push_back(w); 
} 

void DFSUtil(int v, vector<bool>& visited) { 

visited[v] = true; 
cout << v << " "; 

for (int adjacent : adj[v]) { 
if (!visited[adjacent]) { 
DFSUtil(adjacent, visited); 
} 
} 
} 

void DFS(int start) { 
vector<bool> visited(V, false); 
DFSUtil(start, visited); 
} 
}; 
int main() { 

Graph g(4); 
g.addEdge(0, 1); 
g.addEdge(0, 2); 
g.addEdge(1, 2); 
g.addEdge(2, 0); 
g.addEdge(2, 3); 
g.addEdge(3, 3); 
cout << "DFS Traversal starting from vertex 2: "; 
g.DFS(2); 
return 0; 
}




// Heap Sort
#include <iostream> 
#include <vector> 
using namespace std; 
 
void heapify(vector<int>& arr, int n, int i) { 
int largest = i; 
int left = 2 * i + 1; 
int right = 2 * i + 2; 

if (left < n && arr[left] > arr[largest]) 
largest = left; 

if (right < n && arr[right] > arr[largest]) 
largest = right; 

if (largest != i) { 
swap(arr[i], arr[largest]); 

heapify(arr, n, largest); 
} 
} 

void heapSort(vector<int>& arr) { 
int n = arr.size(); 

for (int i = n / 2 - 1; i >= 0; --i) 
heapify(arr, n, i); 

for (int i = n - 1; i > 0; --i) { 

swap(arr[0], arr[i]); 

heapify(arr, i, 0); 
} 
} 
int main() { 
vector<int> arr = {12, 11, 13, 5, 6, 7}; 
cout << "Original array:" << endl; 
for (int num : arr) { 
cout << num << " "; 
} 
cout << endl; 
heapSort(arr); 
cout << "Sorted array:" << endl; 
for (int num : arr) { 
cout << num << " "; 
} 
cout << endl; 
return 0; 
}



//Horshpool


#include <iostream>
#include <cstring>



using namespace std;

char str[100], ptn[20];
int res, m, n, len, i, j, k, table[1000];

void shift(char p[]) {
    len = strlen(p);
    for (i = 0; i < 1000; i++)
        table[i] = len;
    for (j = 0; j <= len - 2; j++)
        table[p[j]] = len - 1 - j;
}

int horspool(char p[], char t[]) {
    shift(p);
    m = strlen(p);
    n = strlen(t);
    i = m - 1;
    while (i <= n - 1) {
        k = 0;
        while (k <= m - 1 && (p[m - 1 - k] == t[i - k]))
            k++;
        if (k == m)
            return i - m + 1;
        else
            i = i + table[t[i]];
    }
    return -1;
}

int main() {


    cout << "Enter the text: ";
    cin.getline(str, 100);
    cout << "Enter the pattern to be found: ";
    cin.getline(ptn, 20);

    res = horspool(ptn, str);

    if (res == -1)
        cout << "\nPattern not found\n";
    else
        cout << "Pattern found at " << res + 1 << " position\n";





    return 0;
}

